# Generated by Django 4.2.2 on 2023-07-26 10:35

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import imagekit.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('logo', imagekit.models.fields.ProcessedImageField(blank=True, default='userlogos/user.jpg', upload_to='userlogos/%Y/%m/%d')),
                ('description', models.TextField(blank=True, verbose_name='About me')),
                ('name', models.CharField(db_index=True, max_length=250, verbose_name='full name')),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='date added')),
                ('is_featured', models.BooleanField(db_index=True, default=False, verbose_name='Is featured')),
                ('title', models.CharField(blank=True, max_length=250, verbose_name='Title')),
                ('advancedUser', models.BooleanField(db_index=True, default=False, verbose_name='advanced user')),
                ('media_count', models.IntegerField(default=0)),
                ('notification_on_comments', models.BooleanField(default=True, verbose_name='Whether you will receive email notifications for comments added to your content')),
                ('location', models.CharField(blank=True, max_length=250, verbose_name='Location')),
                ('is_editor', models.BooleanField(db_index=True, default=False, verbose_name='MediaCMS Editor')),
                ('is_manager', models.BooleanField(db_index=True, default=False, verbose_name='MediaCMS Manager')),
                ('allow_contact', models.BooleanField(default=False, verbose_name='Whether allow contact will be shown on profile page')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-date_added', 'name'],
                'indexes': [models.Index(fields=['-date_added', 'name'], name='users_user_date_ad_4eb0b8_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
